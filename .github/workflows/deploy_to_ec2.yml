name: Flask + React Docker Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # Build and push Flask API image
    - name: Build and push Flask API Docker image
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/crawlic:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/crawlic:${{ github.sha }}
        file: ./Dockerfile
        context: .
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/crawlic:latest
        cache-to: type=inline
    
    - name: Clear Docker Build Cache
      run: |
        docker builder prune --force

    # Build and push React Frontend image
    - name: Build and push React Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/crawlic-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/crawlic-frontend:${{ github.sha }}
        file: ./frontend/Dockerfile
        context: ./frontend
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/crawlic-frontend:latest
        cache-to: type=inline
    
    - name: Create .env file
      run: |
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_HOST=db" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "REDIS_URL=redis://redis:6379/0" >> .env
        echo "ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }}" >> .env
        echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
    
    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "docker-compose.yml,nginx.conf,.env"
        target: /home/${{ secrets.EC2_USER }}/projects/crawlic/
    
    - name: Deploy on EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          cd /home/${{ secrets.EC2_USER }}/projects/crawlic
          
          # Log in to Docker Hub on EC2
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          
          # Stop all containers and remove them
          sudo docker-compose down
          
          # Pull latest images
          sudo docker-compose pull
          
          # Start services with the updated configuration
          sudo docker-compose up -d
          
          # Wait for containers to be healthy
          sleep 30
          
          # Clean up old images
          sudo docker image prune -af
          
          # Show container status
          sudo docker-compose ps
          
          # Show worker count
          echo "Worker containers:"
          sudo docker ps | grep worker